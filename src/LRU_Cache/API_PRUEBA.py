import requests
import time
import secret_config
from src.LRU_Cache.LRUCache import LRUCache

# Configuraci√≥n
CITY = "Medellin"
URL = f"http://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={secret_config.API_KEY}&units=metric"

# Crear cach√© con capacidad para 5 entradas
cache = LRUCache(capacity=5)


def fetch_weather():
    """Obtiene el clima sin cach√©"""
    start_time = time.time()
    response = requests.get(URL)
    end_time = time.time()
    elapsed_time = end_time - start_time

    if response.status_code == 200:
        data = response.json()
        print(f"[Sin cach√©] Clima en Medell√≠n: {data['weather'][0]['description']}, {data['main']['temp']}¬∞C")
    else:
        print(f"Error en la solicitud: {response.status_code}")
        data = None  # Asegurar que data sea None si hay error

    print(f"Tiempo de respuesta sin cach√©: {elapsed_time:.4f} segundos")
    return data


def fetch_weather_with_cache():
    #Verifica si el clima est√° en cach√© antes de hacer la solicitud
    print("[INFO] Intentando obtener datos de la cach√©...")

    cached_data = cache.get(CITY)
    print(f"[DEBUG] Cache content: {cached_data}")  # Depuraci√≥n

    if cached_data and isinstance(cached_data, dict):
        start_time = time.time()  # Inicia el cron√≥metro
        result = cached_data  # Obtiene los datos de la cach√©
        end_time = time.time()  # Detiene el cron√≥metro

        elapsed_time = end_time - start_time  # Calcula el tiempo transcurrido

        print(f"[Con cach√©] Clima en Medell√≠n: {result['weather'][0]['description']}, {result['main']['temp']}¬∞C")
        print(f"Tiempo de respuesta con cach√©: {elapsed_time:.6f} segundos")  # Imprime el tiempo real
        return result

    print("[INFO] No se encontraron datos en cach√©. Haciendo solicitud a la API...")

    # Si no est√° en cach√©, hacer la solicitud
    data = fetch_weather()
    if isinstance(data, dict):  # Asegurar que los datos sean correctos antes de guardarlos
        cache.put(CITY, data)
        print("[INFO] Datos almacenados en cach√©.")
    else:
        print("[ERROR] Los datos recibidos no son v√°lidos.")

    return data


# üöÄ PRUEBAS
print("üîµ Ejecutando sin cach√©:")
fetch_weather()  # Primera vez sin cach√©

print("\nüü¢ Ejecutando con cach√© (primera vez, debe hacer la solicitud):")
fetch_weather_with_cache()  # Guarda en cach√©

print("\nüü¢ Ejecutando con cach√© (segunda vez, debe devolver instant√°neo):")
fetch_weather_with_cache()  # Usa la cach√©
